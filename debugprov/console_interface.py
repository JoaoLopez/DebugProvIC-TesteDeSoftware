from __future__ import unicode_literals

import sqlite3

from graphviz import Graph
from prompt_toolkit.shortcuts import confirm, prompt

from debugprov.node import Node
from debugprov.execution_tree_creator import ExecTreeCreator
from debugprov.top_down import TopDown
from debugprov.heaviest_first import HeaviestFirst
from debugprov.visualization import Visualization
from debugprov.provenance_enhancement import ProvenanceEnhancement
from debugprov.single_stepping import SingleStepping
from debugprov.divide_and_query import DivideAndQuery
from debugprov.validity import Validity

class CustomVisualization(Visualization):

    def name_for_node(self, node:Node):
        return " {} {} '{}'".format(str(node.ev_id),node.name,str(node.retrn))

    def navigate(self, node:Node):
        chds = node.childrens
        for n in chds:
            self.graph.edge(str(node.ev_id), str(n.ev_id), None, dir='forward')
            if n.validity == Validity.INVALID:
                self.graph.node(str(n.ev_id), self.name_for_node(n), fillcolor=self.INVALID_COLOR, style='filled')
            elif n.validity == Validity.VALID: 
                self.graph.node(str(n.ev_id), self.name_for_node(n), fillcolor=self.VALID_COLOR, style='filled')
            elif n.validity == Validity.UNKNOWN:  
                self.graph.node(str(n.ev_id), self.name_for_node(n))
            elif n.validity is Validity.NOT_IN_PROV:
                self.graph.node(str(n.ev_id), self.name_for_node(n), fillcolor=self.PROV_PRUNED_NODE_COLOR, style='filled')
            
        if len(chds) > 0:
            g = Graph()
            for c in chds:
                g.node(str(c.ev_id))
            g.graph_attr['rank']='same'
            self.graph.subgraph(g)

        for n in chds: 
            self.navigate(n)

class ConsoleInterface:

    DEFAULT_SQLITE_PATH = '.noworkflow/db.sqlite'
    NAVIGATION_STRATEGIES = [SingleStepping, TopDown, HeaviestFirst, DivideAndQuery] 

    def ask_db_path(self):
        self.db_path = prompt('Insert the path to the db.sqlite generated by noWorkFlow: ', default=self.DEFAULT_SQLITE_PATH)
        
    def select_nav_strategy(self):
        nav_names = [n.__name__ for n in self.NAVIGATION_STRATEGIES]
        print("Choose a navigation strategy: ")
        for idx,obj in enumerate(nav_names):
            print('[{}] - {}'.format(str(idx+1),obj))
        ans = prompt('> ')
        self.choosen_nav_strategy = self.NAVIGATION_STRATEGIES[int(ans)-1] 
        
    def ask_use_prov(self):
        return confirm('Do you want to use provenance enhancement? ')

    def ask_use_wrong_data(self):
        return confirm('Do you want to inform which output data is wrong? ')

    def ask_wrong_data(self, exec_tree):
        custom_vis = CustomVisualization(exec_tree)
        custom_vis.view_exec_tree('custom_tree')
        print("Choose the id of the node with incorrect data: ")
        return int(prompt('> '))

    def ask_output_file_name(self):
        self.out_filename = prompt('Output file name: ', default='exec_tree')

    def run(self):
        self.db_path = self.DEFAULT_SQLITE_PATH
        try:
            cursor = sqlite3.connect(self.db_path).cursor()
            creator = ExecTreeCreator(cursor)
        except:
            raise Exception('Error reading database!')  
            import sys;sys.exit()
        exec_tree = creator.create_exec_tree()
        self.select_nav_strategy()
        nav = self.choosen_nav_strategy(exec_tree) 
        if self.ask_use_prov():
            prov = ProvenanceEnhancement(exec_tree, cursor)
            prov.enhance_all()
            if self.ask_use_wrong_data():
                wrong_data_id = self.ask_wrong_data(exec_tree)
                wrong_data = exec_tree.search_by_ev_id(wrong_data_id)
                prov.final_dependencies = []
                prov.enhance(wrong_data)
            nav.provenance_prune()
        result_tree = nav.navigate()
        file_name = self.ask_output_file_name()
        vis = Visualization(result_tree)
        vis.view_exec_tree(file_name)
    