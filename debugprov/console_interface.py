from __future__ import unicode_literals

import sqlite3

from prompt_toolkit.shortcuts import confirm, prompt

from debugprov.execution_tree_creator import ExecTreeCreator
from debugprov.top_down import TopDown
from debugprov.heaviest_first import HeaviestFirst
from debugprov.visualization import Visualization
from debugprov.provenance_enhancement import ProvenanceEnhancement
from debugprov.single_stepping import SingleStepping
from debugprov.divide_and_query import DivideAndQuery

class ConsoleInterface:

    DEFAULT_SQLITE_PATH = 'C:/Users/linha/Desktop/ws/py-scripts-examples/age-avg/.noworkflow/db.sqlite'
    NAVIGATION_STRATEGIES = [SingleStepping, TopDown, HeaviestFirst, DivideAndQuery] 

    def ask_db_path(self):
        self.db_path = prompt('Insert the path to the db.sqlite generated by noWorkFlow: ', default=self.DEFAULT_SQLITE_PATH)
        
    def select_nav_strategy(self):
        nav_names = [n.__name__ for n in self.NAVIGATION_STRATEGIES]
        print("Choose a navigation strategy: ")
        for idx,obj in enumerate(nav_names):
            print('[{}] - {}'.format(str(idx+1),obj))
        ans = prompt('> ')
        self.choosen_nav_strategy = self.NAVIGATION_STRATEGIES[int(ans)-1] 
        
    def ask_use_prov(self):
        return confirm('Do you want to use provenance enhancement? ')

    def ask_use_wrong_data(self):
        return confirm('Do you want to inform which output data is wrong? ')

    def ask_wrong_data(self):
        raise NotImplementedError("Not Ready Yet")

    def ask_output_file_name(self):
        self.out_filename = prompt('Output file name: ', default='exec_tree')

    def run(self):
        self.ask_db_path()
        try:
            cursor = sqlite3.connect(self.db_path).cursor()
            creator = ExecTreeCreator(cursor)
        except:
            raise Exception('Error reading database!')  
            import sys;sys.exit()
        exec_tree = creator.create_exec_tree()
        self.select_nav_strategy()
        nav = self.choosen_nav_strategy(exec_tree) 
        if self.ask_use_prov():
            prov = ProvenanceEnhancement(exec_tree, cursor)
            if self.ask_use_wrong_data():
                wrong_data = self.ask_use_wrong_data()
            else:
                prov.enhance_all()
        result_tree = nav.navigate()
        file_name = self.ask_output_file_name()
        vis = Visualization(result_tree)
        vis.view_exec_tree(file_name)
    